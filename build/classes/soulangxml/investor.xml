<?xml version="1.0" encoding="UTF-8"?>
<docs>
	<!--SoupLang是WebCollector 2.x中的一种爬虫脚本，以Jsoup内置的CSS SELECTOR为基础 程序会将SoupLang的脚本(xml)转换成语义树，所以不用担心配置文件会影响网页抽取的速度。 
		SoupLang除了有Jsoup选择元素、元素属性的功能外，还可以做正则匹配、写数据库等操作 -->

	<!--一个doc对应一个网页,url表示网页的正则。 如果有多个doc的url，和网页的url匹配，程序会执行多次(所有对应的doc)。 所以尽量保证一个网页之能匹配到一个doc。 
		多个doc的设计，是为了爬虫统一管理配置设定的。很多爬虫要多多种不同类型的页面做抽取，抽取 的代码很难统一管理。利用SoupLang这种脚本，可以将所有的抽取业务写道一个 -->
	<doc url="https://www.itjuzi.com/investor/[0-9]{1,8}">
	
		<element selector="p>span[class=name marr10]"><!-- .boxed>p>.name -->
			<!--div[class=public-info pull-left]>p>a	原	-->
			<!--这里如果将name="content"放到element中，name的输出是一个jsoup的Element元素， 插入到数据库中时，会以Element元素源码的形式插入 -->
			<text name="Tmp_Investor_Name" />
		</element>

<!--		 <element selector="div[class=media-body]>ui.detail-info>li:contains(职位:)"> -->
<!--			<text name="Tmp_Investor_Position"/> </element> <element selector="div[class=media-body]>ui.detail-info>li:contains(微博:)"> -->
<!--			<text name="Tmp_Investor_Recom"/> </element> <element selector="div[class=media-body]>ui.detail-info>li:contains(介绍:)"> -->
<!--			<text name="Tmp_Investor_Blog"/> </element> -->
		<element selector="p[class=titleset]">
			<text name="Tmp_Investor_Position" />
		</element>

		<element selector="li:contains(微博:)">
				<text name="Tmp_Investor_Blog" />
			<element selector="a">
			<text name="Tmp_Investor_Blog" />
			</element>
		</element>
<!--		li:contains(介绍:)         hr[class=nomargin] +div -->
		<element selector="div[class=pad block]:last-child"> 
				<text name="Tmp_Investor_Recom" />
			<element selector="em">
			<text name="Tmp_Investor_Recom" />
			</element>
		</element>
		<!--li:contains(地点:)		-->
		<element selector="p[class=titleset] +p">
		   <text name="Tmp_Investor_Address" />
		</element>
		<!--		li:contains(工作:)-->
		<element selector="p[class=titleset]>span>a">
		   <text name="Tmp_Investor_Work" />
		</element>
		<!--		li:contains(教育:)-->
		<!--	div[class=titlebar]:contains(教育经历) +div	-->
		<element selector="div[class=titlebar]:contains(教育经历) +div>ul[class=list-timeline-h]">
		   <text name="Tmp_Investor_Education" />
		</element>
		<!--		li:contains(投资领域:)-->
		<element selector="div[class=list-tags-box]:contains(投资领域)>div">
		   <text name="Tmp_Investor_Domain" />
		</element>
		<!--		img[class=media-object]-->
		<element selector="span[class=usericon]>img">
			<attr attr="abs:src" name="Tmp_Investor_imgsrc"/>
		</element>
<!--		-->
		<!--插入数据库,temp1是程序中，用JDBCHelper.createMysqlTemplate创建template时指定的名称 -->
		<sql
			sql="REPLACE INTO Tmp_Investor_Info (Tmp_Investor_Name, Tmp_Investor_Position, Tmp_Investor_Blog, Tmp_Investor_Recom, Tmp_Investor_Address, Tmp_Investor_Work, Tmp_Investor_Education, Tmp_Investor_Domain, Tmp_Investor_Contacts, Tmp_Investor_imgsrc, Tmp_Investor_Note, deleteFlag, createtime, updtime, Tmp_Investor_Code) VALUES (?,?,?,?,?,?,?,?,null,?, null, '0',now(),date_add(utc_timestamp(), interval 8 hour) ,?)"
			params="Tmp_Investor_Name,Tmp_Investor_Position,Tmp_Investor_Blog,Tmp_Investor_Recom,Tmp_Investor_Address,Tmp_Investor_Work,Tmp_Investor_Education,Tmp_Investor_Domain,Tmp_Investor_imgsrc,url" template="temp2" /> 
<!--  	<sql 
			    sql ="MERGE INTO Tmp_Investor_Info a USING ( SELECT ? Tmp_Investor_Code, ? Tmp_Investor_Name, ? Tmp_Investor_Position, ? Tmp_Investor_Blog, ? Tmp_Investor_Recom, ? Tmp_Investor_Address, ? Tmp_Investor_Work, ? Tmp_Investor_Education, ? Tmp_Investor_Domain, ? Tmp_Investor_Contacts, ? Tmp_Investor_imgsrc, ? Tmp_Investor_Note, ? deleteFlag, ? createtime, ? updtime ) b ON ( a.Tmp_Investor_Code = b.Tmp_Investor_Code ) WHEN matched THEN UPDATE SET a.Tmp_Investor_Name = b.Tmp_Investor_Name, a.Tmp_Investor_Position = b.Tmp_Investor_Position, a.Tmp_Investor_Blog = b.Tmp_Investor_Blog, a.Tmp_Investor_Recom = b.Tmp_Investor_Recom, a.Tmp_Investor_Address = b.Tmp_Investor_Address, a.Tmp_Investor_Work = b.Tmp_Investor_Work, a.Tmp_Investor_Education = b.Tmp_Investor_Education, a.Tmp_Investor_Domain = b.Tmp_Investor_Domain, a.Tmp_Investor_Contacts = b.Tmp_Investor_Contacts, a.Tmp_Investor_imgsrc = b.Tmp_Investor_imgsrc, a.Tmp_Investor_Note = b.Tmp_Investor_Note, a.deleteFlag = b.deleteFlag, a.createtime = b.createtime, a.updtime = b.updtime WHEN NOT matched THEN INSERT INTO Tmp_Investor_Info ( Tmp_Investor_Name, Tmp_Investor_Position, Tmp_Investor_Blog, Tmp_Investor_Recom, Tmp_Investor_Address, Tmp_Investor_Work, Tmp_Investor_Education, Tmp_Investor_Domain, Tmp_Investor_Contacts, Tmp_Investor_imgsrc, Tmp_Investor_Note, deleteFlag, createtime, updtime, Tmp_Investor_Code ) VALUES ( ?,?,?,?, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL ,? )" 
			   params="Tmp_Investor_Name,Tmp_Investor_Position,Tmp_Investor_Blog,Tmp_Investor_Recom,url" template="temp2" />  -->
<!-- <sql sql ="MERGE INTO Tmp_Investor_Info a USING ( SELECT ? Tmp_Investor_Name, ? Tmp_Investor_Position, ? Tmp_Investor_Blog, ? Tmp_Investor_Recom,? Tmp_Investor_Code) b ON ( a.Tmp_Investor_Code = b.Tmp_Investor_Code ) WHEN matched THEN UPDATE SET a.Tmp_Investor_Name = b.Tmp_Investor_Name, a.Tmp_Investor_Position = b.Tmp_Investor_Position, a.Tmp_Investor_Blog = b.Tmp_Investor_Blog, a.Tmp_Investor_Recom = b.Tmp_Investor_Recom WHEN NOT matched THEN INSERT INTO Tmp_Investor_Info ( Tmp_Investor_Name, Tmp_Investor_Position, Tmp_Investor_Blog, Tmp_Investor_Recom, Tmp_Investor_Address, Tmp_Investor_Work, Tmp_Investor_Education, Tmp_Investor_Domain, Tmp_Investor_Contacts, Tmp_Investor_imgsrc, Tmp_Investor_Note, deleteFlag, createtime, updtime, Tmp_Investor_Code ) VALUES  (b.Tmp_Investor_Name, b.Tmp_Investor_Position, b.Tmp_Investor_Blog, b.Tmp_Investor_Recom, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,b.Tmp_Investor_Code)"
  params="Tmp_Investor_Name,Tmp_Investor_Position,Tmp_Investor_Blog,Tmp_Investor_Recom,url"  template="temp2" /> -->
	</doc>

</docs>